
enum ReminderStatus {
  INITIALIZED
  SHOWN
  SNOOZED
  DONE
}

enum RepeatType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

type Reminder @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  uuid: String!
  date: AWSDate!
  time: AWSTime!
  status: ReminderStatus!
  todoID: ID!
  Todo: Todo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

type Tag @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  uuid: String!
  name: String!
  color: String
  Todos(filter: ModelTagTodoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTagTodoConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

type Project @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  uuid: String!
  name: String!
  emoji: String
  color: String
  cover: String
  Todos(filter: ModelTodoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTodoConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

type Todo @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  uuid: String!
  title: String!
  description: String
  done: AWSDateTime
  dueDate: AWSDate
  dueTime: AWSTime
  endDate: AWSDate
  createdAt: AWSDateTime!
  priority: Int
  repeatType: RepeatType
  repeatInterval: Int
  doneRepeat: [AWSJSON]
  deletedAt: AWSDateTime
  Reminders(filter: ModelReminderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelReminderConnection
  projectID: ID!
  Project: Project
  Tags(filter: ModelTagTodoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTagTodoConnection
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

type TagTodo @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  tagID: ID!
  todoID: ID!
  tag: Tag!
  todo: Todo!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelReminderConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Reminder]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelReminderStatusInput {
  eq: ReminderStatus
  ne: ReminderStatus
}

input ModelReminderFilterInput {
  id: ModelIDInput
  uuid: ModelStringInput
  date: ModelStringInput
  time: ModelStringInput
  status: ModelReminderStatusInput
  todoID: ModelIDInput
  and: [ModelReminderFilterInput]
  or: [ModelReminderFilterInput]
  not: ModelReminderFilterInput
}

type Query {
  getReminder(id: ID!): Reminder @aws_api_key @aws_iam @aws_cognito_user_pools
  listReminders(filter: ModelReminderFilterInput, limit: Int, nextToken: String): ModelReminderConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncReminders(filter: ModelReminderFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelReminderConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getTag(id: ID!): Tag @aws_api_key @aws_iam @aws_cognito_user_pools
  listTags(filter: ModelTagFilterInput, limit: Int, nextToken: String): ModelTagConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncTags(filter: ModelTagFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTagConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getProject(id: ID!): Project @aws_api_key @aws_iam @aws_cognito_user_pools
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelProjectConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getTodo(id: ID!): Todo @aws_api_key @aws_iam @aws_cognito_user_pools
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTodoConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getTagTodo(id: ID!): TagTodo @aws_api_key @aws_iam @aws_cognito_user_pools
  listTagTodos(filter: ModelTagTodoFilterInput, limit: Int, nextToken: String): ModelTagTodoConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncTagTodos(filter: ModelTagTodoFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTagTodoConnection @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelReminderConditionInput {
  uuid: ModelStringInput
  date: ModelStringInput
  time: ModelStringInput
  status: ModelReminderStatusInput
  todoID: ModelIDInput
  and: [ModelReminderConditionInput]
  or: [ModelReminderConditionInput]
  not: ModelReminderConditionInput
}

input CreateReminderInput {
  id: ID
  uuid: String!
  date: AWSDate!
  time: AWSTime!
  status: ReminderStatus!
  todoID: ID!
  _version: Int
}

input UpdateReminderInput {
  id: ID!
  uuid: String
  date: AWSDate
  time: AWSTime
  status: ReminderStatus
  todoID: ID
  _version: Int
}

input DeleteReminderInput {
  id: ID!
  _version: Int
}

type Mutation {
  createReminder(input: CreateReminderInput!, condition: ModelReminderConditionInput): Reminder @aws_api_key @aws_iam @aws_cognito_user_pools
  updateReminder(input: UpdateReminderInput!, condition: ModelReminderConditionInput): Reminder @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteReminder(input: DeleteReminderInput!, condition: ModelReminderConditionInput): Reminder @aws_api_key @aws_iam @aws_cognito_user_pools
  createTag(input: CreateTagInput!, condition: ModelTagConditionInput): Tag @aws_api_key @aws_iam @aws_cognito_user_pools
  updateTag(input: UpdateTagInput!, condition: ModelTagConditionInput): Tag @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteTag(input: DeleteTagInput!, condition: ModelTagConditionInput): Tag @aws_api_key @aws_iam @aws_cognito_user_pools
  createProject(input: CreateProjectInput!, condition: ModelProjectConditionInput): Project @aws_api_key @aws_iam @aws_cognito_user_pools
  updateProject(input: UpdateProjectInput!, condition: ModelProjectConditionInput): Project @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteProject(input: DeleteProjectInput!, condition: ModelProjectConditionInput): Project @aws_api_key @aws_iam @aws_cognito_user_pools
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo @aws_api_key @aws_iam @aws_cognito_user_pools
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo @aws_api_key @aws_iam @aws_cognito_user_pools
  createTagTodo(input: CreateTagTodoInput!, condition: ModelTagTodoConditionInput): TagTodo @aws_api_key @aws_iam @aws_cognito_user_pools
  updateTagTodo(input: UpdateTagTodoInput!, condition: ModelTagTodoConditionInput): TagTodo @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteTagTodo(input: DeleteTagTodoInput!, condition: ModelTagTodoConditionInput): TagTodo @aws_api_key @aws_iam @aws_cognito_user_pools
}

type Subscription {
  onCreateReminder(owner: String): Reminder @aws_subscribe(mutations: ["createReminder"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateReminder(owner: String): Reminder @aws_subscribe(mutations: ["updateReminder"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteReminder(owner: String): Reminder @aws_subscribe(mutations: ["deleteReminder"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateTag(owner: String): Tag @aws_subscribe(mutations: ["createTag"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateTag(owner: String): Tag @aws_subscribe(mutations: ["updateTag"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteTag(owner: String): Tag @aws_subscribe(mutations: ["deleteTag"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateProject(owner: String): Project @aws_subscribe(mutations: ["createProject"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateProject(owner: String): Project @aws_subscribe(mutations: ["updateProject"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteProject(owner: String): Project @aws_subscribe(mutations: ["deleteProject"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateTodo(owner: String): Todo @aws_subscribe(mutations: ["createTodo"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateTodo(owner: String): Todo @aws_subscribe(mutations: ["updateTodo"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteTodo(owner: String): Todo @aws_subscribe(mutations: ["deleteTodo"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateTagTodo(owner: String): TagTodo @aws_subscribe(mutations: ["createTagTodo"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateTagTodo(owner: String): TagTodo @aws_subscribe(mutations: ["updateTagTodo"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteTagTodo(owner: String): TagTodo @aws_subscribe(mutations: ["deleteTagTodo"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}

type ModelTagConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Tag]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTagFilterInput {
  id: ModelIDInput
  uuid: ModelStringInput
  name: ModelStringInput
  color: ModelStringInput
  and: [ModelTagFilterInput]
  or: [ModelTagFilterInput]
  not: ModelTagFilterInput
}

input ModelTagConditionInput {
  uuid: ModelStringInput
  name: ModelStringInput
  color: ModelStringInput
  and: [ModelTagConditionInput]
  or: [ModelTagConditionInput]
  not: ModelTagConditionInput
}

input CreateTagInput {
  id: ID
  uuid: String!
  name: String!
  color: String
  _version: Int
}

input UpdateTagInput {
  id: ID!
  uuid: String
  name: String
  color: String
  _version: Int
}

input DeleteTagInput {
  id: ID!
  _version: Int
}

type ModelProjectConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Project]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelProjectFilterInput {
  id: ModelIDInput
  uuid: ModelStringInput
  name: ModelStringInput
  emoji: ModelStringInput
  color: ModelStringInput
  cover: ModelStringInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

input ModelProjectConditionInput {
  uuid: ModelStringInput
  name: ModelStringInput
  emoji: ModelStringInput
  color: ModelStringInput
  cover: ModelStringInput
  and: [ModelProjectConditionInput]
  or: [ModelProjectConditionInput]
  not: ModelProjectConditionInput
}

input CreateProjectInput {
  id: ID
  uuid: String!
  name: String!
  emoji: String
  color: String
  cover: String
  _version: Int
}

input UpdateProjectInput {
  id: ID!
  uuid: String
  name: String
  emoji: String
  color: String
  cover: String
  _version: Int
}

input DeleteProjectInput {
  id: ID!
  _version: Int
}

type ModelTodoConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Todo]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelRepeatTypeInput {
  eq: RepeatType
  ne: RepeatType
}

input ModelTodoFilterInput {
  id: ModelIDInput
  uuid: ModelStringInput
  title: ModelStringInput
  description: ModelStringInput
  done: ModelStringInput
  dueDate: ModelStringInput
  dueTime: ModelStringInput
  endDate: ModelStringInput
  createdAt: ModelStringInput
  priority: ModelIntInput
  repeatType: ModelRepeatTypeInput
  repeatInterval: ModelIntInput
  doneRepeat: ModelStringInput
  deletedAt: ModelStringInput
  projectID: ModelIDInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

input ModelTodoConditionInput {
  uuid: ModelStringInput
  title: ModelStringInput
  description: ModelStringInput
  done: ModelStringInput
  dueDate: ModelStringInput
  dueTime: ModelStringInput
  endDate: ModelStringInput
  createdAt: ModelStringInput
  priority: ModelIntInput
  repeatType: ModelRepeatTypeInput
  repeatInterval: ModelIntInput
  doneRepeat: ModelStringInput
  deletedAt: ModelStringInput
  projectID: ModelIDInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

input CreateTodoInput {
  id: ID
  uuid: String!
  title: String!
  description: String
  done: AWSDateTime
  dueDate: AWSDate
  dueTime: AWSTime
  endDate: AWSDate
  createdAt: AWSDateTime
  priority: Int
  repeatType: RepeatType
  repeatInterval: Int
  doneRepeat: [AWSJSON]
  deletedAt: AWSDateTime
  projectID: ID!
  _version: Int
}

input UpdateTodoInput {
  id: ID!
  uuid: String
  title: String
  description: String
  done: AWSDateTime
  dueDate: AWSDate
  dueTime: AWSTime
  endDate: AWSDate
  createdAt: AWSDateTime
  priority: Int
  repeatType: RepeatType
  repeatInterval: Int
  doneRepeat: [AWSJSON]
  deletedAt: AWSDateTime
  projectID: ID
  _version: Int
}

input DeleteTodoInput {
  id: ID!
  _version: Int
}

type ModelTagTodoConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [TagTodo]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTagTodoFilterInput {
  id: ModelIDInput
  tagID: ModelIDInput
  todoID: ModelIDInput
  and: [ModelTagTodoFilterInput]
  or: [ModelTagTodoFilterInput]
  not: ModelTagTodoFilterInput
}

input ModelTagTodoConditionInput {
  tagID: ModelIDInput
  todoID: ModelIDInput
  and: [ModelTagTodoConditionInput]
  or: [ModelTagTodoConditionInput]
  not: ModelTagTodoConditionInput
}

input CreateTagTodoInput {
  id: ID
  tagID: ID!
  todoID: ID!
  _version: Int
}

input UpdateTagTodoInput {
  id: ID!
  tagID: ID
  todoID: ID
  _version: Int
}

input DeleteTagTodoInput {
  id: ID!
  _version: Int
}

