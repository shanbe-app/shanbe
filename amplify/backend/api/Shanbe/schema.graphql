enum CalendarType {
  GREGORIAN
  SHAMSI
}

enum ThemeType {
  DARK
  LIGHT
  SYSTEM
}

enum PriorityType {
  URGENT
  HIGH
  NORMAL
}

enum ReminderStatus {
  INITIALIZED
  SHOWN
  SNOOZED
  DONE
}

enum SmartSpaceType {
  TODAY
  TOMORROW
  DONE
  TRASH
  WONTDO
  ALL
  NEXT7DAYS
  OVERDUE
}

enum SpaceFilterLogic {
  AND
  NOT
  OR
}

enum QueryPredicateLogic {
  AND
  OR
}

enum SpaceFilterType {
  TAGS
  SPACES
  KEYWORD
  PRIORITY
  DATE
}

type SpaceQueryPredicate @model @auth(rules: [{allow: private}]) {
  id: ID!
  filterLogic: SpaceFilterLogic
  filterType: SpaceFilterType
  filterValue: [String]
  parentID: ID @index(name: "byParent")
  childPredicates: [SpaceQueryPredicate] @hasMany(indexName: "byParent", fields: ["id"])
  childLogic: QueryPredicateLogic
}

type SmartSpace @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  emoji: String
  color: String
  queryPredicate: SpaceQueryPredicate
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


type Space @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  emoji: String
  color: String
  todos: [Todo] @hasMany(indexName: "bySpace", fields: ["id"])
  sections: [Section] @hasMany(indexName: "bySpace", fields: ["id"])
  parentID: ID @index(name: "byParent")
  spaces: [Space] @hasMany(indexName: "byParent", fields: ["id"])
  showOverDue: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Todo @model @auth(rules: [{allow: private}, {allow: owner}]) {
  id: ID!
  title: String!
  content: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  startDate: AWSDateTime
  dueDate: AWSDateTime
  endDate: AWSDateTime
  doneAt: AWSDateTime
  priority: Int
  timezone: String
  isFloating: Boolean
  isAllDay: Boolean
  rrule: String
  sectionID: ID! @index(name: "bySection")
  section: Section @belongsTo(fields: ["sectionID"])
  parentID: ID @index(name: "byParent")
  todos: [Todo] @hasMany(indexName: "byParent", fields: ["id"])
  spaceID: ID! @index(name: "bySpace")
  space: Space! @belongsTo(fields: ["spaceID"])
  reminders: [Reminder] @hasMany(indexName: "byTodo", fields: ["id"])
  tags: [Tag] @manyToMany(relationName: "TodoTag")
  nextItem: Todo @hasOne
}

type Preferences @model @auth(rules: [{allow: owner}]) {
  id: ID!
  theme: ThemeType
  calendar: CalendarType
  visibleSmartSpaces: [SmartSpaceType]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Section @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String!
  todos: [Todo] @hasMany(indexName: "bySection", fields: ["id"])
  spaceID: ID! @index(name: "bySpace")
  space: Space @belongsTo(fields: ["spaceID"])
}

type Reminder @model @auth(rules: [{allow: owner}]) {
  id: ID!
  trigger: String!
  status: ReminderStatus
  todoID: ID! @index(name: "byTodo")
  todo: Todo @belongsTo(fields: ["todoID"])
}

type Tag @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String!
  color: String
  todos: [Todo] @manyToMany(relationName: "TodoTag")
}
 