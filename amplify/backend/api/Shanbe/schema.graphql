enum CalendarType {
  GREGORIAN
  SHAMSI
}

enum ThemeType {
  DARK
  LIGHT
  SYSTEM
}

enum PriorityType {
  URGENT
  HIGH
  NORMAL
}

enum ReminderStatus {
  INITIALIZED
  SHOWN
  SNOOZED
  DONE
}

enum StaticTaskListType {
  TODAY
  TOMORROW
  DONE
  TRASH
  WONTDO
  ALL
  NEXT7DAYS
  OVERDUE
}

enum TaskListFilterLogic {
  AND
  NOT
  OR
}

enum QueryPredicateLogic {
  AND
  OR
}

enum TaskListFilterType {
  TAGS
  TASKLIST
  KEYWORD
  PRIORITY
  DATE
}

type TaskListQueryPredicate @model @auth(rules: [{allow: private}]) {
  id: ID!
  filterLogic: TaskListFilterLogic
  filterType: TaskListFilterType
  filterValue: [String]
  parentID: ID @index(name: "byParent")
  childQueryPredicates: [TaskListQueryPredicate] @hasMany(indexName: "byParent", fields: ["id"])
  childQueryPredicatesLogic: QueryPredicateLogic
  smartTaskListID: ID @index(name: "bySmartTaskList")
  smartTaskList: SmartTaskList @belongsTo(fields: ["smartTaskListID"])
}

type SmartTaskList @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  emoji: String
  color: String
  queryPredicate: TaskListQueryPredicate @hasOne
  folderID: ID @index(name: "byFolder")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


type TaskList @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  emoji: String
  color: String
  todos: [Todo] @hasMany(indexName: "byTaskList", fields: ["id"])
  sections: [Section] @hasMany(indexName: "byTaskList", fields: ["id"])
  parentID: ID @index(name: "byParent")
  childTaskLists: [TaskList] @hasMany(indexName: "byParent", fields: ["id"])
  folderID: ID @index(name: "byFolder")
  folder: Folder @belongsTo(fields: ["folderID"])
  showOverDue: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Folder @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  color: String
  taskLists: [TaskList] @hasMany(indexName: "byFolder", fields: ["id"])
  smartTaskLists: [SmartTaskList] @hasMany(indexName: "byFolder", fields: ["id"])
}

type Todo @model @auth(rules: [{allow: private}, {allow: owner}]) {
  id: ID!
  title: String!
  content: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  startDate: AWSDateTime
  dueDate: AWSDateTime
  endDate: AWSDateTime
  doneAt: AWSDateTime
  priority: Int
  timezone: String
  isFloating: Boolean
  isAllDay: Boolean
  rrule: String
  sectionID: ID! @index(name: "bySection")
  section: Section @belongsTo(fields: ["sectionID"])
  parentID: ID @index(name: "byParent")
  todos: [Todo] @hasMany(indexName: "byParent", fields: ["id"])
  taskListID: ID! @index(name: "byTaskList")
  taskList: TaskList! @belongsTo(fields: ["taskListID"])
  reminders: [Reminder] @hasMany(indexName: "byTodo", fields: ["id"])
  tags: [Tag] @manyToMany(relationName: "TodoTag")
  nextItemID: ID @index(name: "byNextItem")
  nextItem: Todo @belongsTo(fields: ["nextItemID"])
  temporalString: String
}

type Preferences @model @auth(rules: [{allow: owner}]) {
  id: ID!
  theme: ThemeType
  calendar: CalendarType
  visibleStaticTaskLists: [StaticTaskListType]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Section @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String!
  todos: [Todo] @hasMany(indexName: "bySection", fields: ["id"])
  taskListID: ID! @index(name: "byTaskList")
  taskList: TaskList @belongsTo(fields: ["taskListID"])
}

type Reminder @model @auth(rules: [{allow: owner}]) {
  id: ID!
  trigger: String!
  status: ReminderStatus
  todoID: ID! @index(name: "byTodo")
  todo: Todo @belongsTo(fields: ["todoID"])
}

type Tag @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String!
  color: String
  todos: [Todo] @manyToMany(relationName: "TodoTag")
}
 